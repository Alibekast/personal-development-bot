import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import logging
import os

# üîê Telegram Bot API —Ç–æ–∫–µ–Ω—ñ–Ω “õ–æ—Ä—à–∞“ì–∞–Ω –æ—Ä—Ç–∞ (environment variables) –∞—Ä“õ—ã–ª—ã –∞–ª—É
API_TOKEN = os.getenv("8110633206:AAHwJgpPyK7vv8N9vU39fgCh1vU3MIOBYCE")

# ‚úÖ –õ–æ–≥—Ç–∞—Ä–¥—ã –±–∞–ø—Ç–∞—É
logging.basicConfig(level=logging.INFO)

# ü§ñ –ë–æ—Ç –ø–µ–Ω –¥–∏—Å–ø–µ—Ç—á–µ—Ä–¥—ñ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É
bot = Bot(token=8110633206:AAHwJgpPyK7vv8N9vU39fgCh1vU3MIOBYCE)
dp = Dispatcher()

# üìö **–¢“±–ª“ì–∞–ª—ã“õ –¥–∞–º—É –º”ô–∑—ñ—Ä—ñ**
async def personal_dev_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìñ –û“õ—ã–ª“ì–∞–Ω –∫—ñ—Ç–∞–ø—Ç–∞—Ä", callback_data="read_books")],
            [InlineKeyboardButton(text="üìö –ö–µ“£–µ—Å –∫—ñ—Ç–∞–ø—Ç–∞—Ä", callback_data="recommend_books")],
            [InlineKeyboardButton(text="üé• –ü–∞–π–¥–∞–ª—ã –≤–∏–¥–µ–æ–ª–∞—Ä", callback_data="videos")],
            [InlineKeyboardButton(text="üåÖ –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Ç”ô–∂—ñ—Ä–∏–±–µ–ª–µ—Ä", callback_data="practices")],
            [InlineKeyboardButton(text="üîô –ê—Ä—Ç“õ–∞", callback_data="back")]
        ]
    )
    await message.answer("üìö **–¢“±–ª“ì–∞–ª—ã“õ –¥–∞–º—É –±”©–ª—ñ–º—ñ**", reply_markup=keyboard)

# üìñ **–û“õ—ã–ª“ì–∞–Ω –∫—ñ—Ç–∞–ø—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ**
async def show_books(callback: types.CallbackQuery):
    books = "üìñ –û“õ—ã–ª“ì–∞–Ω –∫—ñ—Ç–∞–ø—Ç–∞—Ä:\n- ¬´–ê—Ç–æ–º–¥—ã“õ –¥–∞“ì–¥—ã–ª–∞—Ä¬ª –î–∂–µ–π–º—Å –ö–ª–∏—Ä\n- ¬´7 —Ç–∏—ñ–º–¥—ñ –¥–∞“ì–¥—ã¬ª –°—Ç–∏–≤–µ–Ω –ö–æ–≤–∏"
    await callback.message.answer(books)

# üìö **–ö–µ“£–µ—Å –∫—ñ—Ç–∞–ø—Ç–∞—Ä**
async def show_recommendations(callback: types.CallbackQuery):
    recommendations = "üìö –ö–µ“£–µ—Å –∫—ñ—Ç–∞–ø—Ç–∞—Ä:\n- ¬´–¢“±–ª“ì–∞–Ω—ã“£ “õ“±—Ä—ã–ª—ã–º—ã¬ª –ö–∞—Ä–ª –Æ–Ω–≥\n- ¬´–î–∞–º—É–¥—ã“£ 5 “õ–∞–¥–∞–º—ã¬ª –ë—Ä–∞–π–∞–Ω –¢—Ä–µ–π—Å–∏"
    await callback.message.answer(recommendations)

# üé• **–ü–∞–π–¥–∞–ª—ã –≤–∏–¥–µ–æ–ª–∞—Ä**
async def show_videos(callback: types.CallbackQuery):
    videos = "üé• –ü–∞–π–¥–∞–ª—ã –≤–∏–¥–µ–æ–ª–∞—Ä:\n1Ô∏è‚É£ https://youtube.com/personal-growth\n2Ô∏è‚É£ https://youtube.com/mindfulness-course"
    await callback.message.answer(videos)

# üåÖ **–ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Ç”ô–∂—ñ—Ä–∏–±–µ–ª–µ—Ä**
async def show_practices(callback: types.CallbackQuery):
    practices = "üåÖ –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Ç”ô–∂—ñ—Ä–∏–±–µ–ª–µ—Ä:\n‚úÖ –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –∂—É—Ä–Ω–∞–ª –∂–∞–∑—É\n‚úÖ –ú–µ–¥–∏—Ç–∞—Ü–∏—è 15 –º–∏–Ω—É—Ç\n‚úÖ SPLENDID ”ô–¥—ñ—Å—ñ –±–æ–π—ã–Ω—à–∞ –∂–æ—Å–ø–∞—Ä–ª–∞—É"
    await callback.message.answer(practices)

# üîô **–ê—Ä—Ç“õ–∞**
async def go_back(callback: types.CallbackQuery):
    await callback.message.answer("üîô –ê—Ä—Ç“õ–∞ “õ–∞–π—Ç—É “Ø—à—ñ–Ω /start –±–∞—Å—ã“£—ã–∑.")

# üìå **–ë–æ—Ç –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä—ã–Ω —Ç—ñ—Ä–∫–µ—É**
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("üöÄ –î–∞–º—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Å—ã–Ω–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! –ú“±–Ω–¥–∞ —Å—ñ–∑ —Ç“±–ª“ì–∞–ª—ã“õ –¥–∞–º—É, –ø–∞–π–¥–∞–ª—ã –∫—ñ—Ç–∞–ø—Ç–∞—Ä –º–µ–Ω —Ç”ô–∂—ñ—Ä–∏–±–µ–ª–µ—Ä —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç —Ç–∞–±–∞ –∞–ª–∞—Å—ã–∑.")
    await personal_dev_menu(message)

@dp.callback_query(lambda c: c.data == "read_books")
async def handle_read_books(callback: types.CallbackQuery):
    await show_books(callback)

@dp.callback_query(lambda c: c.data == "recommend_books")
async def handle_recommend_books(callback: types.CallbackQuery):
    await show_recommendations(callback)

@dp.callback_query(lambda c: c.data == "videos")
async def handle_videos(callback: types.CallbackQuery):
    await show_videos(callback)

@dp.callback_query(lambda c: c.data == "practices")
async def handle_practices(callback: types.CallbackQuery):
    await show_practices(callback)

@dp.callback_query(lambda c: c.data == "back")
async def handle_back(callback: types.CallbackQuery):
    await go_back(callback)

# üèÅ **–ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É**
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
